openapi: 3.0.0


paths: 
  /register:
    post:
        tags:
        - "Authenticaiton"
        summary: "Adds a new user"
        description: "Save user in DB"
        operationId: "UserRegister" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                $ref: "#/components/schemas/User"
        responses:
          "405":
            description: "Username already exists" 
          "404":
            description: "URL not found"
          "500":
            description: "Internal Server error"
          "200":
            description: "Registration was sucessfull"
            
  /login:
    post:
        tags:
        - "Authenticaiton"
        summary: "Logs user into the system"
        description: ""
        operationId: "UserLogin" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                $ref: "#/components/schemas/UserLogin"
        responses:
          "401":
            description: "Username or Password incorrect" 
          "404":
            description: "URL not found"
          "500":
            description: "Internal Server error"
          "200":
            description: >
              Successfully authenticated.
              The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
            headers: 
              Set-Cookie:
                schema: 
                  type: string
                  example: JSESSIONID=abcde12345; Path=/; HttpOnly
            
  
  /logout:
     get:
      tags:
        - "Authenticaiton"
      summary: "Log the user from the system"
      description: ""
      operationId: "UserLogOut" 
          
      responses:
        "500":
          description: "Internal Server error"
        "200":
           description: "Logout Successfull"

            
  /users/favoriteGames:
     get:
      tags:
        - "User"
      summary: "Retrieve the favorite games for the logged in user"
      description: ""
      operationId: "getFavGamesForUser" 
  
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "Game was added to favorite"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfGames"

  /users/addFavoriteGames:
      post:
        tags:
          - "User"
        summary: "add the favorite game to the list of the user's favorite games"
        description: "used in the user's personal page"
        operationId: "addFavGameForUser" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                properties:
                  game_id:          
                    type: "integer"
                    example: 1   

        responses:
          "404":
            description: "URL not found"
          "403":
            description: "Can only add future games to favorite games list"
          "401":
            description: "Unauthorized, please login first" 
          "400":
            description: "Invalid Date or Teams supplied"
          "200":
            description: "Game was added succesfully"
          
  /users/favoriteTeams:
    get:
      tags:
        - "User"
      summary: "Retrieve the favorite teams for the logged in user"
      description: ""
      operationId: "getFavTeamsForUser" 
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfTeams"
                
  /users/addFavoriteTeams:
    post:
      tags:
        - "User"
      summary: "add the favorite team to the list of the user's favorite teams"
      description: "used in the user's personal page"
      operationId: "addFavTeamForUser" 
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                team_id:
                  type: "integer"
                  example: 939
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "400":
          description: "Invalid team id"
        "200":
          description: "Team was added succesfully"
          
  /users/favoritePlayers:
    get:
      tags:
        - "User"
      summary: "Retrieve the favorite players for the logged in user"
      description: ""
      operationId: "getFavPlayersForUser" 
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfPlayers"
       
  /users/addFavoritePlayers:
    post:
      tags:
        - "User"
      summary: "add the favorite player to the list of the user's favorite players"
      description: "used in the user's personal page"
      operationId: "addFavPlayerForUser" 
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                player_id:
                  type: "integer"
                  example: 172104
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "400":
          description: "Invalid player id"
        "200":
          description: "player was added succesfully"
  
  /games/addgame:
    post:
      tags:
        - "Games"
      summary: "Add a game to the current stage"
      description: "used for the league representitve to add games to the league"
      operationId: "addgame"     
      responses:
        "404":
          description: "URL not found"

        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Game"

  /league/getDetails:
    get:
      tags:
        - "League"
      summary: "Get information about the superliga league "
      operationId: "getLeagueByName"     
      responses:
        "404":
          description: "URL not found"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/League"
                
                
  /season/{seasonId}:
    get:
      tags:
        - "Season"
      summary: "Get information about the season by using the season ID"
      operationId: "getSeasonById" 
      parameters:
      - name: "seasonId"
        in: "path"
        description: "ID of season to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 13
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid season id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Season"
        
  /season/stage/{seasonId}:
    get:
      tags:
        - "Season"
      summary: "Get information about the stage by using the season ID"
      operationId: "getStageBySeasonId" 
      parameters:
      - name: "seasonId"
        in: "path"
        description: "ID of season to which the stage belongs to"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 13
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid season id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Stage"
                
  /stage/{stageId}:
    get:
      tags:
        - "Stage"
      summary: "Get information about the stage by using the Stage id"
      operationId: "getStageByStageId" 
      parameters:
      - name: "stageId"
        in: "path"
        description: "ID of stage to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 11142
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid season id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Stage"
  
  /players/id/{playerId}:
    get:
      tags:
        - "Player"
      description: "used for player card in personal page"
      summary: "Get information about the player by using the player id"
      operationId: "getPlayerByStageId" 
      parameters:
      - name: "playerId"
        in: "path"
        description: "ID of player to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 172104
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Player"
                
  /players/name/{player_name}:
    get:
      tags:
        - "Player"
      description: "used for player card in personal page"
      summary: "Get information about the player by using the player fullname"
      operationId: "getPlayerByName" 
      parameters:
      - name: "player_name"
        in: "path"
        description: "Full name of player to return"
        required: true
        schema:
          type: "String"
          example: "James Morrison"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Player"

  /coach/{coachId}:
    get:
      tags:
        - "Coach"
      description: "used for coach card in personal page"
      summary: "Get information about the coach by using the coach id"
      operationId: "getCoachByStageId" 
      parameters:
      - name: "coachId"
        in: "path"
        description: "ID of coach to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 1467946
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid coach id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Coach"
                
                
  /teams/id/{teamId}:
    get:
      tags:
        - "Team"
      summary: "Get information about the team by using the team id"
      description: "used in the team's personal page"
      operationId: "getTeamById" 
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 72
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid team id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Team"
                
  /teams/name/{team_name}:
    get:
      tags:
        - "Team"
      summary: "Get information about the team by using the team name"
      description: "used in the team's personal page"
      operationId: "getTeamByName" 
      parameters:
      - name: "team_name"
        in: "path"
        description: "Name of team to return"
        required: true
        schema:
          type: "string"
          example: "Celtic"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid team name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Team"

  /games/currentStageGames:
    get:
      tags:
        - "Games"
      summary: "Get the latest games for the current stage"
      description: "for the current stage page"
            
      responses:
        "404":
          description: "URL not found"

        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfGames"

components:
  schemas:
    User:    # Schema name
      type: object
      properties:
        username:
          type: "string"
          example: "Johnc"   
        firstname:
          type: "string"
          example: "John"  
        lastname:
          type: "string"
          example: "Cena"
        country:
          type: "string"
          example: "Algeria"
        password:
          type: "string"
          example: "1234John"
        email:
          type: "string"
          example: "johnc@example.com"
        imageurl:
          type: "string"
          example: "https:\\profile-john.com"
          
    UserLogin:
      type: object
      properties:
        username:
          type: "string"
          example: "Johnc"  
        password:
          type: "string"
          example: "1234John"
          
    Team:
      type: object
      properties:
        id:
            type: "integer"
            format: "int64"
            example: 939
        name:
            type: "string"
            example: "Barcelona"

        logo_path:
            type: "string"
            example: "https://cdn.sportmonks.com/images//soccer/teams/11/939.png"
        season_name:
            type: "string"
            example: "2020/2021"
        squad:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Player"
        coach:
            $ref: "#/components/schemas/Coach"
        latest:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Game"
        upcoming:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Game"
              
    Season:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 17141  
        name:
          type: "string"
          example: "2020/2021"
        league_id:
          type: "integer"
          format: "int64"
          example: 2021  
        is_current_season:
          type: "boolean"
          example: true
        current_round_id:
          type: "integer"
          format: "int64"
          example: 194969  
        current_stage_id:
          type: "integer"
          format: "int64"
          example: 77447501  
          
    League:
      type: object
      properties:
        league_name:
          type: "String"
          example: "Superliga"
        current_season_name:
          type: "String"
          example: "2020/2021"
        current_stage_name:
          type: "String"
          example: "Europa League Play-offs - Final"
        next_game:
          type: object
          $ref: "#/components/schemas/Game"

    Game:
      type: object
      properties:
        game_date:
          type: "String"
          example: "2021-10-28"
        game_time:
          type: "String"
          example: "17:00:00"
        home_team:
          type: "String"
          example: "Midtjylland"
        home_team_id:
          type: "integer"
          example: 939
        away_team:
          type: "String"
          example: "København"
        away_team_id:
          type: "integer"
          example: 85
        stadium:
          type: "String"
          example: "Kiryat Eliezer"
        referee:
          type: object
          $ref: "#/components/schemas/Referee"
        results:
          type: "String"
          example: "3-1"
        event_log:
          type: object
          $ref: "#/components/schemas/EventLog"
    
    Referee:
      type: object
      properties:
        name:
          type: "String"
          example: "Denis Shalayev"

    GameEvent:
      type: object
      properties:
        event_date:
          type: "String"
          example: "2021-01-13"
        event_time:
          type: "String"
          example: "20:05:00"
        event_game_time:
          type: "integer"
          format: "int64"
          example: 65  
        event:
          type: "String"
          example: "Red card for Messi"

    Player:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 172104  
        team_id:
          type: "integer"
          format: "int64"
          example: 53  
        country_id:
          type: "integer"
          format: "int64"
          example: 1161  
        position:
          type: "string"
          example: "Midfielder" 
        fullname:
          type: "string"
          example: "James Forest"
        firstname:
          type: "string"
          example: "James"
        lastname:
          type: "string"
          example: "Forest"
        nationality:
          type: "string"
          example: "Scotland"  
        birthplace:
          type: "string"
          example: "Prestwick" 
        birthdate:
          type: "string"
          example: "07/07/1991"  
        height:
          type: "string"
          example: "175 cm"  
        weight:
          type: "string"
          example: "90 kg"
        team:
          type: "string"
          example: "Celtic"
        image_path:
          type: "string"
          example: "https://cdn.sportmonks.com/images/soccer/players/8/172104.png"
    
    Coach:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1467946  
        team_id:
          type: "integer"
          format: "int64"
          example: 53  
        country_id:
          type: "integer"
          format: "int64"
          example: 491  
        fullname:
          type: "string"
          example: "Neil Lennon"
        firstname:
          type: "string"
          example: "Neil"
        lastname:
          type: "string"
          example: "Lennon"
        nationality:
          type: "string"
          example: "Northern Ireland"  
        birthplace:
          type: "string"
          example: "Lurgan" 
        birthdate:
          type: "string"
          example: "25/06/1971"  
        image_path:
          type: "string"
          example: "https://cdn.sportmonks.com/images/soccer/players/10/1467946.png"
          
    Stage:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 77447500  
        name:
          type: "string"
          example: "2nd Phase"
        type:
          type: "string"
          example: "Group Stage"
        league_id:
          type: "integer"
          format: "int64"
          example: 501
        season_id:
          type: "integer"
          format: "int64"
          example: 17141
        sort_order:
          type: "integer"
          format: "int64"
          example: 1
        has_standings:
          type: "boolean"
          example: false

    EventLog:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/GameEvent"

    Game:
      type: object
      properties:
        Date:
          type: "string"
          example: "20/02/2020"
        Time:
          type: "string"
          example: "17:30:00"
        HomeTeam:
          type: "string"
          example: "Barcelona"
        AwayTeam:
          type: "string"
          example: "Real Madrid"
        Stadium:
          type: "string"
          example: "sami ofer"

    ArrayOfTeams:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Team"
          
    ArrayOfPlayers:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Player"
    
    ArrayOfGames:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Game"
