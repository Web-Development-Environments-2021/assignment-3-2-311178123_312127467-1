openapi: 3.0.0


paths: 
  /register:
    post:
        tags:
        - "Authenticaiton"
        summary: "Adds a new user"
        description: "Save user in DB"
        operationId: "UserRegister" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                $ref: "#/components/schemas/User"
        responses:
          "405":
            description: "Username already exists" 
          "404":
            description: "URL not found"
          "500":
            description: "Internal Server error"
          "200":
            description: "Registration was sucessfull"
            
  /login:
    post:
        tags:
        - "Authenticaiton"
        summary: "Logs user into the system"
        description: ""
        operationId: "UserLogin" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                $ref: "#/components/schemas/UserLogin"
        responses:
          "401":
            description: "Username or Password incorrect" 
          "404":
            description: "URL not found"
          "500":
            description: "Internal Server error"
          "200":
            description: >
              Successfully authenticated.
              The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
            headers: 
              Set-Cookie:
                schema: 
                  type: string
                  example: JSESSIONID=abcde12345; Path=/; HttpOnly
            
  
  /logout:
     post:
      tags:
        - "Authenticaiton"
      summary: "Log the user from the system"
      description: ""
      operationId: "UserLogOut" 
          
      responses:
        "500":
          description: "Internal Server error"
        "200":
           description: "Logout Successfull"

            
  /users/favoriteGames:
     get:
      tags:
        - "User"
      summary: "Retrieve the favorite games for the logged in user"
      description: ""
      operationId: "getFavGamesForUser" 
  
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "Game was added to favorite"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfGames"

  /users/addFavoriteGames:
      post:
        tags:
          - "User"
        summary: "add the favorite game to the list of the user's favorite games"
        description: "used in the user's personal page"
        operationId: "addFavGameForUser" 
        requestBody:
          content:
            application/json:  
              schema:
                type: object
                properties:
                  game_id:          
                    type: "integer"
                    example: 1   

        responses:
          "404":
            description: "URL not found"
          "403":
            description: "Can only add future games to favorite games list"
          "401":
            description: "Unauthorized, please login first" 
          "400":
            description: "Invalid Date or Teams supplied"
          "200":
            description: "Game was added succesfully"
          
  /users/favoriteTeams:
    get:
      tags:
        - "User"
      summary: "Retrieve the favorite teams for the logged in user"
      description: ""
      operationId: "getFavTeamsForUser" 
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfTeams"
                
  /users/addFavoriteTeams:
    post:
      tags:
        - "User"
      summary: "add the favorite team to the list of the user's favorite teams"
      description: "used in the user's personal page"
      operationId: "addFavTeamForUser" 
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                team_id:
                  type: "integer"
                  example: 939
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "400":
          description: "Invalid team id"
        "200":
          description: "Team was added succesfully"
          
  /users/favoritePlayers:
    get:
      tags:
        - "User"
      summary: "Retrieve the favorite players for the logged in user"
      description: ""
      operationId: "getFavPlayersForUser" 
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfPlayers"
       
  /users/addFavoritePlayers:
    post:
      tags:
        - "User"
      summary: "add the favorite player to the list of the user's favorite players"
      description: "used in the user's personal page"
      operationId: "addFavPlayerForUser" 
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                player_id:
                  type: "integer"
                  example: 172104
          
      responses:
        "404":
          description: "URL not found"
        "401":
          description: "Unauthorized, please login first"
        "400":
          description: "Invalid player id"
        "200":
          description: "player was added succesfully"
  
  /games/addGame:
    post:
      tags:
        - "Games"
      summary: "Add a game to the current stage"
      description: "used for the league representitve to add games to the Superliga league. 
        If the teams ids are not known, do not send them.
       Only teams from the Superliga can be added.
      Only future games can be added. For Future games no results and eventlog should not be given"
      operationId: "addgame"
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              $ref: "#/components/schemas/FutureGame"

      responses:
        "500":
          description: "Internal Server error"
        "405":
          description: "The teams already have a match in that date & time"
        "406":
          description: "Bad game input. Please check the date or teams"
        "404":
          description: "URL not found"
        "401":
          description: "Privilege Error: The following action is only permitted to league representives Or you have not Logged in first"
        "200":
          description: "The game was updated"
  
  /games/addScore:
    put:
      tags:
        - "Games"
      summary: "Add a score to a game"
      description: "used for the league representitve to add score to games that were played"
      operationId: "addScore"      
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                game_id:
                  type: "integer"
                  example: 1
                score:
                  type: "string"
                  example: "2-1"
      responses:
        "500":
          description: "Internal Server error"
        "404":
          description: "URL not found"
        "401":
          description: ""Privilege Error: The following action is only permitted to league representives"
        "200":
          description: "The game was updated"
        
  /games/addEvent:
    put:
      tags:
        - "Games"
      summary: "Add an event to a game"
      description: "used for the league representitve to add events to games that were played. If the event alreay exist it will be updates with the new event description, else
      it will be created as a new event"
      operationId: "addEvent"      
      requestBody:
        content:
          application/json:  
            schema:
              type: object
              properties:
                game_id:
                  type: "integer"
                  example: 1
                event:
                  type: object
                  $ref: "#/components/schemas/GameEvent"

      responses:
        "500":
            description: "Internal Server error"
        "404":
          description: "URL not found"
        "401":
          description: "Privilege Error: The following action is only permitted to league representives"
        "200":
          description: "The game was updated"


  /league/getDetails:
    get:
      tags:
        - "League"
      summary: "Get information about the superliga league "
      operationId: "getLeagueByName"     
      responses:
        "404":
          description: "URL not found"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/League"

  
  /players/id/{playerId}:
    get:
      tags:
        - "Player"
      description: "used for player card in personal page"
      summary: "Get the full information about the player by using the player id"
      operationId: "getPlayerByStageId" 
      parameters:
      - name: "playerId"
        in: "path"
        description: "ID of player to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 172104
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Player"
                
  /players/name/{player_name}:
    get:
      tags:
        - "Player"
      description: "used for player card in personal page"
      summary: "Get the full information about the player by using the player fullname"
      operationId: "getPlayerByName" 
      parameters:
      - name: "player_name"
        in: "path"
        description: "Full name of player to return"
        required: true
        schema:
          type: "String"
          example: "James Morrison"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Player"
  
  /players/search/{player_name}:
    get:
      tags:
        - "Player"
      description: "Used for the search page."
      summary: "Get part of the player's information by using the player's fullname. All the players with that
      name will return"
      parameters:
      - name: "player_name"
        in: "path"
        description: "Full name of player to return"
        schema:
          type: "String"
          example: "Rune Frantsen"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:
                type: array
                items:
                  type: object
                  allOf:
                     - $ref: "#/components/schemas/PlayerPreview"
                    
  /players/search/{player_name}/{player_position_id}:
    get:
      tags:
        - "Player"
      description: "Used for the search page."
      summary: "Get part of the player's information by using the player's fullname and position as filter.
      All the players with that name and position id will return"
      parameters:
      - name: "player_name"
        in: "path"
        description: "Full name of player to return"
        schema:
          type: "String"
          example: "Rune Frantsen"
      - name: "player_position_id"   
        in: "path"
        description: "Player position id"
        schema:
          type: "integer"
          example: 2

      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:
                type: array
                items:
                  type: object
                  allOf:
                     - $ref: "#/components/schemas/PlayerPreview"
                    
                
  /teams/id/{teamId}:
    get:
      tags:
        - "Team"
      summary: "Get information about the team by using the team id"
      description: "used in the team's personal page"
      operationId: "getTeamById" 
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        schema:
          type: "integer"
          minimum: 1
          example: 72
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid team id"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Team"
                
  /teams/name/{team_name}:
    get:
      tags:
        - "Team"
      summary: "Get information about the team by using the team name"
      description: "used in the team's personal page"
      operationId: "getTeamByName" 
      parameters:
      - name: "team_name"
        in: "path"
        description: "Name of team to return"
        required: true
        schema:
          type: "string"
          example: "Celtic"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid team name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/Team"
  
  /teams/search/{team_name}:
    get:
      tags:
        - "Team"
      description: "Used for the search page."
      summary: "Get part of the team's information by using the team's name"
      parameters:
      - name: "team_name"
        in: "path"
        description: "Team name of the team to return"
        schema:
          type: "String"
          example: "Horsens"
            
      responses:
        "404":
          description: "URL not found"
        "400":
          description: "Invalid player name"
        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:
                type: object
                properties:            
                  team_name: 
                    type: "Horsens"
                    example: "Rune Frantsen"
                  logo_path:
                    type: "string"
                    example: "https://cdn.sportmonks.com/images//soccer/teams/19/211.png"
                        
            
  /games/currentStageGames:
    get:
      tags:
        - "Games"
      summary: "Get the latest games for the current stage"
      description: "for the current stage page"
            
      responses:
        "404":
          description: "URL not found"

        "200":
          description: "successful operation"
          content:  
            application/json:    
              schema:            
                $ref: "#/components/schemas/ArrayOfGames"

components:

  schemas:
    User:    # Schema name
      type: object
      properties:
        username:
          type: "string"
          example: "Johnc"   
        firstname:
          type: "string"
          example: "John"  
        lastname:
          type: "string"
          example: "Cena"
        country:
          type: "string"
          example: "Algeria"
        password:
          type: "string"
          example: "1234John"
        email:
          type: "string"
          example: "johnc@example.com"
        imageurl:
          type: "string"
          example: "https:\\profile-john.com"
          
    UserLogin:
      type: object
      properties:
        username:
          type: "string"
          example: "Johnc"  
        password:
          type: "string"
          example: "1234John"
          
    Team:
      type: object
      properties:
        id:
            type: "integer"
            format: "int64"
            example: 939
        name:
            type: "string"
            example: "Barcelona"

        logo_path:
            type: "string"
            example: "https://cdn.sportmonks.com/images//soccer/teams/11/939.png"
        season_name:
            type: "string"
            example: "2020/2021"
        squad:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Player"
        coach:
            $ref: "#/components/schemas/Coach"
        latest:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Game"
        upcoming:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/Game"
              
    Season:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 17141  
        name:
          type: "string"
          example: "2020/2021"
        league_id:
          type: "integer"
          format: "int64"
          example: 2021  
        is_current_season:
          type: "boolean"
          example: true
        current_round_id:
          type: "integer"
          format: "int64"
          example: 194969  
        current_stage_id:
          type: "integer"
          format: "int64"
          example: 77447501  
          
    League:
      type: object
      properties:
        league_name:
          type: "String"
          example: "Superliga"
        current_season_name:
          type: "String"
          example: "2020/2021"
        current_stage_name:
          type: "String"
          example: "Europa League Play-offs - Final"
        next_game:
          type: object
          $ref: "#/components/schemas/Game"
    
    FutureGame:
      type: object
      properties:
        game_date:
          type: "String"
          example: "2021-10-28"
        game_time:
          type: "String"
          example: "17:00:00"
        home_team:
          type: "String"
          example: "Midtjylland"
        home_team_id:
          type: "integer"
          example: 939
        away_team:
          type: "String"
          example: "Horsens"
        away_team_id:
          type: "integer"
          example: 211
        stadium:
          type: "String"
          example: "MCH Arena"
        referee:
          type: object
          $ref: "#/components/schemas/Referee"

    Game:
      required:
        - game_date
        - game_time
        - home_team
        - away_team
        - stadium

      type: object
      properties:
        game_date:
          type: "String"
          example: "2021-10-28"
        game_time:
          type: "String"
          example: "17:00:00"
        home_team:
          type: "String"
          example: "Midtjylland"
        home_team_id:
          type: "integer"
          example: 939
        away_team:
          type: "String"
          example: "Horsens"
        away_team_id:
          type: "integer"
          example: 211
        stadium:
          type: "String"
          example: "MCH Arena"
        referee:
          type: object
          $ref: "#/components/schemas/Referee"
        results:
          type: "String"
          example: "3-1"
        event_log:
          type: object
          $ref: "#/components/schemas/EventLog"
    
    Referee:
      type: object
      properties:
        name:
          type: "String"
          example: "Denis Shalayev"

    GameEvent:
      description: "An Event in a game. Options are: Red Card, Yellow Card, Foul, Offside, Goal, Injury, Subsitution"
      type: object
      properties:
        event_date:
          type: "String"
          example: "2021-01-13"
        event_time:
          type: "String"
          example: "20:05:00"
        event_game_time:
          type: "integer"
          format: "int64"
          example: 65  
        event:
          type: "String"
          example: "Red card for Messi"

    Player:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 172104  
        team_id:
          type: "integer"
          format: "int64"
          example: 53  
        country_id:
          type: "integer"
          format: "int64"
          example: 1161  
        position:
          type: "string"
          example: "Midfielder" 
        position_id:
          type: "integer"
          example: 2 
        fullname:
          type: "string"
          example: "James Forest"
        firstname:
          type: "string"
          example: "James"
        lastname:
          type: "string"
          example: "Forest"
        nationality:
          type: "string"
          example: "Scotland"  
        birthplace:
          type: "string"
          example: "Prestwick" 
        birthdate:
          type: "string"
          example: "07/07/1991"  
        height:
          type: "string"
          example: "175 cm"  
        weight:
          type: "string"
          example: "90 kg"
        team:
          type: "string"
          example: "Celtic"
        image_path:
          type: "string"
          example: "https://cdn.sportmonks.com/images/soccer/players/8/172104.png"
    
    PlayerPreview:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 172104  
        team_id:
          type: "integer"
          format: "int64"
          example: 53  
        team:
          type: "string"
          example: "Celtic"
        position:
          type: "string"
          example: "Midfielder" 
        position_id:
          type: "integer"
          example: 2 
        fullname:
          type: "string"
          example: "James Forest"
        image_path:
          type: "string"
          example: "https://cdn.sportmonks.com/images/soccer/players/8/172104.png"

    Coach:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1467946  
        team_id:
          type: "integer"
          format: "int64"
          example: 53  
        country_id:
          type: "integer"
          format: "int64"
          example: 491  
        fullname:
          type: "string"
          example: "Neil Lennon"
        firstname:
          type: "string"
          example: "Neil"
        lastname:
          type: "string"
          example: "Lennon"
        nationality:
          type: "string"
          example: "Northern Ireland"  
        birthplace:
          type: "string"
          example: "Lurgan" 
        birthdate:
          type: "string"
          example: "25/06/1971"  
        image_path:
          type: "string"
          example: "https://cdn.sportmonks.com/images/soccer/players/10/1467946.png"
          
    Stage:
      type: object
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 77447500  
        name:
          type: "string"
          example: "2nd Phase"
        type:
          type: "string"
          example: "Group Stage"
        league_id:
          type: "integer"
          format: "int64"
          example: 501
        season_id:
          type: "integer"
          format: "int64"
          example: 17141
        sort_order:
          type: "integer"
          format: "int64"
          example: 1
        has_standings:
          type: "boolean"
          example: false

    EventLog:
      description: "The Eventlog - contains array of all the events in the game. Used only in past games"
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/GameEvent"

    ArrayOfTeams:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Team"
          
    ArrayOfPlayers:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Player"
    
    ArrayOfGames:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Game"
